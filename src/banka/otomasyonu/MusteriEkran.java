/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package banka.otomasyonu;

import static banka.otomasyonu.Kart.*;
import java.awt.Color;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sirac
 */
public class MusteriEkran extends javax.swing.JFrame {

    static Musteri yeniM = null;

    /**
     * Creates new form MusteriEkran
     */
    public MusteriEkran(String TC, String sifre) {
        try {
            FileReader okuyucu = new FileReader("KullaniciBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[9];
                bilgiler = satır.split("/");
                if (TC.equals(bilgiler[2]) && sifre.equals(bilgiler[4])) {
                    yeniM = new Musteri(bilgiler[0], bilgiler[1], TC, bilgiler[3], sifre, bilgiler[5]);
                    yeniM.para = bilgiler[6];
                }
            }
            okuyucu.close();
            br.close();
        } catch (Exception e) {
            
        }
        initComponents();
        HesabımPanel.setVisible(true);
        KartlarımEkran.setVisible(false);
        IslemlerEkran.setVisible(false);
        setColor(HesabımPanel);
        HesabımPanel.setOpaque(true);
        ParaTransferEkran.setVisible(false);
        KredilerEkran.setVisible(false);
        resetColor(
                new JPanel[]{KartımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel},
                new JPanel[]{KartımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel}
        );
        setLocationRelativeTo(null);
        setResizable(false);
        try {
            FileReader okuyucu = new FileReader("KartBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            boolean Kartkontrol = false;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[7];
                bilgiler = satır.split("/");
                if (bilgiler[0].equals(yeniM.TC) && bilgiler[1].equals("Oto")) {
                    Kartkontrol = true;
                }
            }
            if (Kartkontrol == false) {
                Kart yeniK = new Kart(yeniM.TC, "Oto","+");
            }
            okuyucu.close();
            br.close();
        } catch (Exception e) {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        KartlarımEkran = new javax.swing.JPanel();
        KartEkleButton = new javax.swing.JButton();
        KartSilButon = new javax.swing.JButton();
        KartDuzenleButon = new javax.swing.JButton();
        KartLimitButon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        KartlarTablo = new javax.swing.JTable();
        IslemlerEkran = new javax.swing.JPanel();
        FaturaOdeButton = new javax.swing.JButton();
        ParaCekButton = new javax.swing.JButton();
        KartBorcuOdeButton = new javax.swing.JButton();
        ParaYatırButton = new javax.swing.JButton();
        FaturaOdeParaYeri = new javax.swing.JTextField();
        ParaCekYeri = new javax.swing.JTextField();
        KartBorcuOdeYeri = new javax.swing.JTextField();
        ParaYatirYeri = new javax.swing.JTextField();
        KartSecmeYeri = new javax.swing.JComboBox<>();
        FaturaKurumSec = new javax.swing.JComboBox<>();
        FaturaOdeSec = new javax.swing.JComboBox<>();
        MenuPanel = new javax.swing.JPanel();
        ParaTransferPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        KartımPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        HesabımPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        IslemlerPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        KredilerPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        CikisYapPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        KredilerEkran = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        KredilerTablo = new javax.swing.JTable();
        KrediBasvurButton = new javax.swing.JButton();
        KrediOdeButton = new javax.swing.JButton();
        ParaTransferEkran = new javax.swing.JPanel();
        IBANYazmaYeri = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        GonderilcekParaYeri = new javax.swing.JTextField();
        GonderButon = new javax.swing.JButton();
        HesabimEkran = new javax.swing.JPanel();
        HosgeldinizLabel = new java.awt.Label();
        paraYeri = new java.awt.Label();
        IBANYeri = new java.awt.Label();
        HesapAyarlarıButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(64, 113, 147));
        setMinimumSize(new java.awt.Dimension(749, 435));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        KartlarımEkran.setBackground(new java.awt.Color(64, 113, 147));
        KartlarımEkran.setMaximumSize(new java.awt.Dimension(640, 430));
        KartlarımEkran.setMinimumSize(new java.awt.Dimension(640, 430));
        KartlarımEkran.setPreferredSize(new java.awt.Dimension(640, 430));

        KartEkleButton.setText("Kart Ekle");
        KartEkleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartEkleButtonActionPerformed(evt);
            }
        });

        KartSilButon.setText("Kart Sil");
        KartSilButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartSilButonActionPerformed(evt);
            }
        });

        KartDuzenleButon.setText("Kart Düzenle");
        KartDuzenleButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartDuzenleButonActionPerformed(evt);
            }
        });

        KartLimitButon.setText("Kart Limiti Değiştir");
        KartLimitButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartLimitButonActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(64, 113, 147));

        KartlarTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", "", null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Kart İsmi", "Kart No", "Limit", "Bakiye", "Borç", "Onay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KartlarTablo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KartlarTablo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KartlarTablo.setShowGrid(true);
        KartlarTablo.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(KartlarTablo);
        KartlarTablo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (KartlarTablo.getColumnModel().getColumnCount() > 0) {
            KartlarTablo.getColumnModel().getColumn(0).setResizable(false);
            KartlarTablo.getColumnModel().getColumn(1).setResizable(false);
            KartlarTablo.getColumnModel().getColumn(2).setResizable(false);
            KartlarTablo.getColumnModel().getColumn(3).setResizable(false);
            KartlarTablo.getColumnModel().getColumn(4).setResizable(false);
            KartlarTablo.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout KartlarımEkranLayout = new javax.swing.GroupLayout(KartlarımEkran);
        KartlarımEkran.setLayout(KartlarımEkranLayout);
        KartlarımEkranLayout.setHorizontalGroup(
            KartlarımEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KartlarımEkranLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(KartEkleButton)
                .addGap(29, 29, 29)
                .addComponent(KartSilButon, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KartDuzenleButon, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KartLimitButon)
                .addGap(103, 103, 103))
            .addGroup(KartlarımEkranLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        KartlarımEkranLayout.setVerticalGroup(
            KartlarımEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KartlarımEkranLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KartlarımEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(KartlarımEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(KartEkleButton)
                        .addComponent(KartSilButon)
                        .addComponent(KartLimitButon))
                    .addComponent(KartDuzenleButon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        getContentPane().add(KartlarımEkran, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, 630, 440));

        IslemlerEkran.setBackground(new java.awt.Color(64, 113, 147));
        IslemlerEkran.setMaximumSize(new java.awt.Dimension(640, 430));
        IslemlerEkran.setMinimumSize(new java.awt.Dimension(640, 430));
        IslemlerEkran.setPreferredSize(new java.awt.Dimension(640, 430));

        FaturaOdeButton.setText("Fatura Öde");
        FaturaOdeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FaturaOdeButtonActionPerformed(evt);
            }
        });

        ParaCekButton.setText("Para Çek");
        ParaCekButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParaCekButtonActionPerformed(evt);
            }
        });

        KartBorcuOdeButton.setText("Kart Borcu Öde");
        KartBorcuOdeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartBorcuOdeButtonActionPerformed(evt);
            }
        });

        ParaYatırButton.setText("Para Yatır");
        ParaYatırButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParaYatırButtonActionPerformed(evt);
            }
        });

        KartBorcuOdeYeri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KartBorcuOdeYeriActionPerformed(evt);
            }
        });

        KartSecmeYeri.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İsim / No / Borç" }));

        FaturaKurumSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seçiniz", "Su", "Elektrik", "Doğalgaz", "Telefon" }));

        FaturaOdeSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seçiniz" }));
        FaturaOdeSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FaturaOdeSecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IslemlerEkranLayout = new javax.swing.GroupLayout(IslemlerEkran);
        IslemlerEkran.setLayout(IslemlerEkranLayout);
        IslemlerEkranLayout.setHorizontalGroup(
            IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IslemlerEkranLayout.createSequentialGroup()
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ParaCekYeri, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(IslemlerEkranLayout.createSequentialGroup()
                        .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IslemlerEkranLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(KartSecmeYeri, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(KartBorcuOdeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(KartBorcuOdeYeri, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IslemlerEkranLayout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ParaYatırButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ParaYatirYeri, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)))
                        .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IslemlerEkranLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(ParaCekButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(FaturaOdeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FaturaKurumSec, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FaturaOdeSec, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FaturaOdeParaYeri, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        IslemlerEkranLayout.setVerticalGroup(
            IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IslemlerEkranLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ParaCekButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ParaYatırButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ParaCekYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ParaYatirYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KartBorcuOdeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FaturaOdeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KartSecmeYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FaturaKurumSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IslemlerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FaturaOdeSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KartBorcuOdeYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FaturaOdeParaYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        getContentPane().add(IslemlerEkran, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, 630, 440));

        MenuPanel.setBackground(new java.awt.Color(23, 35, 51));

        ParaTransferPanel.setBackground(new java.awt.Color(41, 57, 80));
        ParaTransferPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        ParaTransferPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ParaTransferPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ParaTransferPanelMouseReleased(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Para Transferi");

        javax.swing.GroupLayout ParaTransferPanelLayout = new javax.swing.GroupLayout(ParaTransferPanel);
        ParaTransferPanel.setLayout(ParaTransferPanelLayout);
        ParaTransferPanelLayout.setHorizontalGroup(
            ParaTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ParaTransferPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
        );
        ParaTransferPanelLayout.setVerticalGroup(
            ParaTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        KartımPanel.setBackground(new java.awt.Color(41, 57, 80));
        KartımPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        KartımPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KartımPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KartımPanelMouseReleased(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Kartlarım");

        javax.swing.GroupLayout KartımPanelLayout = new javax.swing.GroupLayout(KartımPanel);
        KartımPanel.setLayout(KartımPanelLayout);
        KartımPanelLayout.setHorizontalGroup(
            KartımPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KartımPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        KartımPanelLayout.setVerticalGroup(
            KartımPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        HesabımPanel.setBackground(new java.awt.Color(41, 57, 80));
        HesabımPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        HesabımPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HesabımPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HesabımPanelMouseReleased(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("Hesabım");

        javax.swing.GroupLayout HesabımPanelLayout = new javax.swing.GroupLayout(HesabımPanel);
        HesabımPanel.setLayout(HesabımPanelLayout);
        HesabımPanelLayout.setHorizontalGroup(
            HesabımPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HesabımPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HesabımPanelLayout.setVerticalGroup(
            HesabımPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        IslemlerPanel.setBackground(new java.awt.Color(41, 57, 80));
        IslemlerPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        IslemlerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IslemlerPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IslemlerPanelMouseReleased(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("İşlemler");

        javax.swing.GroupLayout IslemlerPanelLayout = new javax.swing.GroupLayout(IslemlerPanel);
        IslemlerPanel.setLayout(IslemlerPanelLayout);
        IslemlerPanelLayout.setHorizontalGroup(
            IslemlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IslemlerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addContainerGap())
        );
        IslemlerPanelLayout.setVerticalGroup(
            IslemlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        KredilerPanel.setBackground(new java.awt.Color(41, 57, 80));
        KredilerPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        KredilerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KredilerPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KredilerPanelMouseReleased(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setText("Krediler");

        javax.swing.GroupLayout KredilerPanelLayout = new javax.swing.GroupLayout(KredilerPanel);
        KredilerPanel.setLayout(KredilerPanelLayout);
        KredilerPanelLayout.setHorizontalGroup(
            KredilerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KredilerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        KredilerPanelLayout.setVerticalGroup(
            KredilerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        CikisYapPanel.setBackground(new java.awt.Color(41, 57, 80));
        CikisYapPanel.setPreferredSize(new java.awt.Dimension(86, 36));
        CikisYapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CikisYapPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CikisYapPanelMouseReleased(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Çıkış Yap");

        javax.swing.GroupLayout CikisYapPanelLayout = new javax.swing.GroupLayout(CikisYapPanel);
        CikisYapPanel.setLayout(CikisYapPanelLayout);
        CikisYapPanelLayout.setHorizontalGroup(
            CikisYapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CikisYapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        CikisYapPanelLayout.setVerticalGroup(
            CikisYapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MenuPanelLayout = new javax.swing.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ParaTransferPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addComponent(HesabımPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addComponent(KartımPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addComponent(IslemlerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addComponent(KredilerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addComponent(CikisYapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );
        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(HesabımPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KartımPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ParaTransferPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IslemlerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KredilerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CikisYapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        getContentPane().add(MenuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 440));

        KredilerEkran.setBackground(new java.awt.Color(64, 113, 147));
        KredilerEkran.setMaximumSize(new java.awt.Dimension(640, 430));
        KredilerEkran.setMinimumSize(new java.awt.Dimension(640, 430));
        KredilerEkran.setPreferredSize(new java.awt.Dimension(640, 430));

        KredilerTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Neden", "Miktar", "Son Ödeme Tarihi", "Faiz", "Ödenecek Miktar", "Onay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KredilerTablo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KredilerTablo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KredilerTablo.setShowGrid(true);
        KredilerTablo.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(KredilerTablo);
        KredilerTablo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (KredilerTablo.getColumnModel().getColumnCount() > 0) {
            KredilerTablo.getColumnModel().getColumn(0).setResizable(false);
            KredilerTablo.getColumnModel().getColumn(1).setResizable(false);
            KredilerTablo.getColumnModel().getColumn(2).setResizable(false);
            KredilerTablo.getColumnModel().getColumn(3).setResizable(false);
            KredilerTablo.getColumnModel().getColumn(4).setResizable(false);
            KredilerTablo.getColumnModel().getColumn(5).setResizable(false);
        }

        KrediBasvurButton.setText("Kredi Başvur");
        KrediBasvurButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrediBasvurButtonActionPerformed(evt);
            }
        });

        KrediOdeButton.setText("Kredi Öde");
        KrediOdeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrediOdeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KredilerEkranLayout = new javax.swing.GroupLayout(KredilerEkran);
        KredilerEkran.setLayout(KredilerEkranLayout);
        KredilerEkranLayout.setHorizontalGroup(
            KredilerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KredilerEkranLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(KrediBasvurButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, Short.MAX_VALUE)
                .addComponent(KrediOdeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KredilerEkranLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        KredilerEkranLayout.setVerticalGroup(
            KredilerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KredilerEkranLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(KredilerEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KrediBasvurButton)
                    .addComponent(KrediOdeButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        getContentPane().add(KredilerEkran, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, 630, 440));

        ParaTransferEkran.setBackground(new java.awt.Color(64, 113, 147));
        ParaTransferEkran.setMaximumSize(new java.awt.Dimension(640, 430));
        ParaTransferEkran.setMinimumSize(new java.awt.Dimension(640, 430));
        ParaTransferEkran.setPreferredSize(new java.awt.Dimension(640, 430));

        jLabel2.setText("IBAN");

        jLabel4.setText("Para Miktarı");

        GonderButon.setText("Gönder");
        GonderButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GonderButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ParaTransferEkranLayout = new javax.swing.GroupLayout(ParaTransferEkran);
        ParaTransferEkran.setLayout(ParaTransferEkranLayout);
        ParaTransferEkranLayout.setHorizontalGroup(
            ParaTransferEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ParaTransferEkranLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(ParaTransferEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(GonderButon, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ParaTransferEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4)
                        .addComponent(IBANYazmaYeri)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GonderilcekParaYeri, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        ParaTransferEkranLayout.setVerticalGroup(
            ParaTransferEkranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ParaTransferEkranLayout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IBANYazmaYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GonderilcekParaYeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(GonderButon)
                .addContainerGap(150, Short.MAX_VALUE))
        );

        getContentPane().add(ParaTransferEkran, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, 630, 440));

        HesabimEkran.setBackground(new java.awt.Color(64, 113, 147));
        HesabimEkran.setMaximumSize(new java.awt.Dimension(640, 430));
        HesabimEkran.setMinimumSize(new java.awt.Dimension(640, 430));
        HesabimEkran.setPreferredSize(new java.awt.Dimension(640, 430));
        HesabimEkran.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HosgeldinizLabel.setAlignment(java.awt.Label.CENTER);
        HosgeldinizLabel.setBackground(new java.awt.Color(102, 204, 255));
        HosgeldinizLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        HosgeldinizLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        HosgeldinizLabel.setText("Hoşgeldiniz "+yeniM.isim+" "+yeniM.soyisim);
        HesabimEkran.add(HosgeldinizLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 46));

        paraYeri.setAlignment(java.awt.Label.CENTER);
        paraYeri.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        paraYeri.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        paraYeri.setMinimumSize(new java.awt.Dimension(32767, 32767));
        paraYeri.setText("Paranız \n"+yeniM.para+" TL");
        HesabimEkran.add(paraYeri, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 450, 170));

        IBANYeri.setAlignment(java.awt.Label.CENTER);
        IBANYeri.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        IBANYeri.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        IBANYeri.setText("IBAN "+yeniM.IBAN);
        HesabimEkran.add(IBANYeri, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 379, 52));

        HesapAyarlarıButton.setText("Hesap Ayarları");
        HesapAyarlarıButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HesapAyarlarıButtonActionPerformed(evt);
            }
        });
        HesabimEkran.add(HesapAyarlarıButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, 120, -1));

        getContentPane().add(HesabimEkran, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, 630, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HesabımPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HesabımPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_HesabımPanelMouseReleased

    private void HesabımPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HesabımPanelMousePressed
        // TODO add your handling code here:
        setColor(HesabımPanel);
        HesabımPanel.setOpaque(true);
        resetColor(
                new JPanel[]{KartımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel},
                new JPanel[]{KartımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel}
        );
        HesabimEkran.setVisible(true);
        KartlarımEkran.setVisible(false);
        IslemlerEkran.setVisible(false);
        ParaTransferEkran.setVisible(false);
        KredilerEkran.setVisible(false);
    }//GEN-LAST:event_HesabımPanelMousePressed

    private void KartımPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KartımPanelMousePressed
        // TODO add your handling code here:
        setColor(KartımPanel);
        kartlarıEkle();
        KartımPanel.setOpaque(true);
        resetColor(
                new JPanel[]{HesabımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel},
                new JPanel[]{HesabımPanel, ParaTransferPanel, IslemlerPanel, KredilerPanel,CikisYapPanel}
        );
        HesabimEkran.setVisible(false);
        KartlarımEkran.setVisible(true);
        IslemlerEkran.setVisible(false);
        ParaTransferEkran.setVisible(false);
        KredilerEkran.setVisible(false);
    }//GEN-LAST:event_KartımPanelMousePressed

    private void KartımPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KartımPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_KartımPanelMouseReleased

    private void ParaTransferPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParaTransferPanelMousePressed
        // TODO add your handling code here:
        setColor(ParaTransferPanel);
        ParaTransferPanel.setOpaque(true);
        resetColor(
                new JPanel[]{KartımPanel, HesabımPanel, IslemlerPanel, KredilerPanel,CikisYapPanel},
                new JPanel[]{KartımPanel, HesabımPanel, IslemlerPanel, KredilerPanel,CikisYapPanel}
        );
        HesabimEkran.setVisible(false);
        KartlarımEkran.setVisible(false);
        IslemlerEkran.setVisible(false);
        ParaTransferEkran.setVisible(true);
        KredilerEkran.setVisible(false);
    }//GEN-LAST:event_ParaTransferPanelMousePressed

    private void ParaTransferPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParaTransferPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_ParaTransferPanelMouseReleased

    private void IslemlerPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IslemlerPanelMousePressed
        // TODO add your handling code here:
        setColor(IslemlerPanel);
        IslemlerPanel.setOpaque(true);
        resetColor(
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, KredilerPanel,CikisYapPanel},
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, KredilerPanel,CikisYapPanel}
        );
        HesabimEkran.setVisible(false);
        KartlarımEkran.setVisible(false);
        IslemlerEkran.setVisible(true);
        ParaTransferEkran.setVisible(false);
        KredilerEkran.setVisible(false);
        BorcOdeComboGuncelle();
        FatureOdeComboGuncelle();
    }//GEN-LAST:event_IslemlerPanelMousePressed

    private void IslemlerPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IslemlerPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_IslemlerPanelMouseReleased

    private void KartSilButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartSilButonActionPerformed
        // TODO add your handling code here:
        kartSil(KartlarTablo);
        kartlarıEkle();
    }//GEN-LAST:event_KartSilButonActionPerformed

    private void KartDuzenleButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartDuzenleButonActionPerformed
        // TODO add your handling code here:
        int row;
        if (KartlarTablo.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Lütfen düzenleme istediğiniz kartı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            row = KartlarTablo.getSelectedRow();
        }
        String yeniIsım = JOptionPane.showInputDialog("Kartın yeni ismini giriniz");
        DefaultTableModel model = (DefaultTableModel) KartlarTablo.getModel();
        Kart.IsımDegistir(model, row, yeniIsım);
        kartlarıEkle();
    }//GEN-LAST:event_KartDuzenleButonActionPerformed

    private void KartLimitButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartLimitButonActionPerformed
        // TODO add your handling code here:
        int row;
        if (KartlarTablo.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Lütfen düzenleme istediğiniz kartı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            row = KartlarTablo.getSelectedRow();
        }
        String yeniLimit = JOptionPane.showInputDialog("Kartın yeni limitini giriniz");
        DefaultTableModel model = (DefaultTableModel) KartlarTablo.getModel();
        limitGuncelle(model, row, yeniLimit);
        kartlarıEkle();
    }//GEN-LAST:event_KartLimitButonActionPerformed

    private void ParaCekButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParaCekButtonActionPerformed
        double miktar;
        if (ParaCekYeri.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen çekmek istediğiniz miktarı giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            miktar = Double.valueOf(ParaCekYeri.getText());
        }
        yeniM.paraCek(miktar);
        paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
        JOptionPane.showMessageDialog(this, "Hesabınızdan " + miktar + " TL çekildi");
    }//GEN-LAST:event_ParaCekButtonActionPerformed

    private void ParaYatırButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParaYatırButtonActionPerformed

        Double miktar;
        if (ParaYatirYeri.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen yatırmak istediğiniz miktarı giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            miktar = Double.valueOf(ParaYatirYeri.getText());
        }
        yeniM.paraYatır(miktar);
        paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
        JOptionPane.showMessageDialog(this, "Hesabınıza " + miktar + " TL yatırıldı");
    }//GEN-LAST:event_ParaYatırButtonActionPerformed

    private void FaturaOdeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FaturaOdeButtonActionPerformed
        // TODO add your handling code here:
        int miktar;
        DefaultTableModel model = (DefaultTableModel) KartlarTablo.getModel();
        int OdencekKart;

        if (0 == FaturaOdeSec.getSelectedIndex()) {
            JOptionPane.showMessageDialog(this, "Lütfen ödeneme yapmak istediğiniz hesabı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (1 == FaturaOdeSec.getSelectedIndex()) {
            double miktar2;
            if (FaturaOdeParaYeri.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Lütfen bir miktar giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                miktar2 = Double.valueOf(FaturaOdeParaYeri.getText());
            }
            yeniM.faturaOde(miktar2);
            paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
        } else {
            OdencekKart = FaturaOdeSec.getSelectedIndex();
            int bakiye = Integer.parseInt(model.getValueAt(OdencekKart - 2, 3).toString());
            if (bakiye == 0) {
                JOptionPane.showMessageDialog(this, "Bu kartta bakiye bulunmamaktadır", "Hata", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                if (FaturaOdeParaYeri.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Lütfen bir miktar giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
                    return;
                } else {
                    miktar = Integer.valueOf(FaturaOdeParaYeri.getText());
                    if (miktar > bakiye) {
                        JOptionPane.showMessageDialog(this, "Ödemek istediğiniz miktar borcunuzdan fazla", "Hata", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }
            }
            String KartınNo = model.getValueAt(OdencekKart - 2, 1).toString();
            try {
                FileReader okuyucu = new FileReader("KartBilgi.txt");
                BufferedReader br = new BufferedReader(okuyucu);
                String satır;
                while ((satır = br.readLine()) != null) {
                    String bilgiler[] = new String[7];
                    bilgiler = satır.split("/");
                    if (KartınNo.equals(bilgiler[2])) {
                        int yenibakiye = bakiye - miktar;
                        bilgiler[4] = String.valueOf(yenibakiye);
                        int borc = Integer.parseInt(bilgiler[5]);
                        borc += miktar;
                        bilgiler[5] = String.valueOf(borc);
                        String satır2 = bilgiler[0] + "/" + bilgiler[1] + "/" + bilgiler[2] + "/" + bilgiler[3] + "/" + bilgiler[4] + "/" + bilgiler[5] + "/" + bilgiler[6];

                        List<String> fileContent = new ArrayList<>(Files.readAllLines(Paths.get("KartBilgi.txt"), StandardCharsets.UTF_8));

                        for (int i = 0; i < fileContent.size(); i++) {
                            if (fileContent.get(i).equals(satır)) {
                                fileContent.set(i, satır2);
                                break;
                            }
                        }
                        Files.write(Paths.get("KartBilgi.txt"), fileContent, StandardCharsets.UTF_8);
                    }
                }
                okuyucu.close();
                br.close();
            } catch (Exception e) {
                
            }
        }

        if (null != FaturaKurumSec.getSelectedItem().toString()) {
            switch (FaturaKurumSec.getSelectedItem().toString()) {
                case "Seçiniz" ->
                    JOptionPane.showMessageDialog(this, "Lütfen ödemek istediğiniz fatura türünü seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
                case "Su" -> {
                    JOptionPane.showMessageDialog(this, "Su faturanız ödendi");
                }
                case "Elektrik" -> {
                    JOptionPane.showMessageDialog(this, "Elektrik faturanız ödendi");
                }
                case "Doğalgaz" -> {
                    JOptionPane.showMessageDialog(this, "Doğalgaz faturanız ödendi");
                }
                case "Telefon" -> {
                    JOptionPane.showMessageDialog(this, "Telefon faturanız ödendi");
                }
                default -> {
                }
            }
        }
        FatureOdeComboGuncelle();
        kartlarıEkle();
        BorcOdeComboGuncelle();
    }//GEN-LAST:event_FaturaOdeButtonActionPerformed

    private void GonderButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GonderButonActionPerformed
        // TODO add your handling code here:
        String IBAN;
        double miktar;
        if (GonderilcekParaYeri.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen göndermek istediğiniz miktarı giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            miktar = Double.valueOf(GonderilcekParaYeri.getText());
        }
        if (IBANYazmaYeri.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen göndermek istediğiniz hesabın IBAN'ını giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            IBAN = IBANYazmaYeri.getText();
        }
        yeniM.paraTransfer(miktar, IBAN);
        paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
        JOptionPane.showMessageDialog(this, IBAN + " IBAN'lı hesaba " + miktar + " TL gönderildi");
    }//GEN-LAST:event_GonderButonActionPerformed

    private void KartEkleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartEkleButtonActionPerformed
        // TODO add your handling code here:
        KartEkle kartekle = new KartEkle(this, true, yeniM);
        kartekle.setVisible(true);
        kartlarıEkle();
    }//GEN-LAST:event_KartEkleButtonActionPerformed

    private void KartBorcuOdeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartBorcuOdeButtonActionPerformed
        // TODO add your handling code here:
        kartlarıEkle();
        int kartıOde, odencek;
        DefaultTableModel model = (DefaultTableModel) KartlarTablo.getModel();
        if (0 == KartSecmeYeri.getSelectedIndex()) {
            JOptionPane.showMessageDialog(this, "Lütfen borcunu ödenemek istediğiniz kartı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            kartıOde = KartSecmeYeri.getSelectedIndex();
        }
        int borc = Integer.parseInt(model.getValueAt(kartıOde - 1, 4).toString());
        if (borc == 0) {
            JOptionPane.showMessageDialog(this, "Bu kartın borcu bulunmamaktadır", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if (KartBorcuOdeYeri.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Lütfen ödemek istediğiniz miktarı giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                odencek = Integer.parseInt(KartBorcuOdeYeri.getText());
                if (odencek > borc) {
                    JOptionPane.showMessageDialog(this, "Ödemek istediğiniz miktar borcunuzdan fazla", "Hata", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }
        String KartınNo = model.getValueAt(kartıOde - 1, 1).toString();
        kartBorcuOde(KartınNo, borc, odencek);
        double miktar = Double.valueOf(odencek);
        yeniM.paraCek(miktar);
        paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
        FatureOdeComboGuncelle();
        kartlarıEkle();
        BorcOdeComboGuncelle();
    }//GEN-LAST:event_KartBorcuOdeButtonActionPerformed

    private void KartBorcuOdeYeriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KartBorcuOdeYeriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KartBorcuOdeYeriActionPerformed

    private void FaturaOdeSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FaturaOdeSecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FaturaOdeSecActionPerformed

    private void HesapAyarlarıButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HesapAyarlarıButtonActionPerformed
        // TODO add your handling code here:
        HesapBilgileri hesap = new HesapBilgileri(this, true, yeniM);
        hesap.setVisible(true);
        HosgeldinizLabel.setText("Hoşgeldiniz " + yeniM.isim + " " + yeniM.soyisim);
    }//GEN-LAST:event_HesapAyarlarıButtonActionPerformed

    private void KredilerPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KredilerPanelMousePressed
        // TODO add your handling code here:
        setColor(KredilerPanel);
        KredilerPanel.setOpaque(true);
        resetColor(
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, IslemlerPanel,CikisYapPanel},
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, IslemlerPanel,CikisYapPanel}
        );
        HesabimEkran.setVisible(false);
        KartlarımEkran.setVisible(false);
        IslemlerEkran.setVisible(false);
        ParaTransferEkran.setVisible(false);
        KredilerEkran.setVisible(true);
        kredileriEkle();
    }//GEN-LAST:event_KredilerPanelMousePressed

    private void KredilerPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KredilerPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_KredilerPanelMouseReleased

    private void KrediBasvurButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrediBasvurButtonActionPerformed
        // TODO add your handling code here:
        String neden, miktar, faiz;
        JTextField miktarYeri = new JTextField(5);
        JComboBox faizYeri = new JComboBox();
        faizYeri.addItem("Seçiniz");
        faizYeri.addItem("%3");
        faizYeri.addItem("%4");
        faizYeri.addItem("%5");
        JTextArea NedenYeri = new JTextArea();
        NedenYeri.setColumns(25);
        NedenYeri.setRows(3);
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Kredi Miktar:"));
        myPanel.add(miktarYeri);
        myPanel.add(Box.createHorizontalStrut(15));
        myPanel.add(new JLabel("Faiz miktarı:"));
        myPanel.add(faizYeri);
        myPanel.add(Box.createHorizontalStrut(15));
        myPanel.add(new JLabel("Kredi nedeni:"));
        myPanel.add(NedenYeri);
        int result = JOptionPane.showConfirmDialog(null, myPanel, "İstediğiniz faiz miktarını, kredi miktarını ve nedenini yazınız", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            if (miktarYeri.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Lütfen bir miktar giriniz", "Hata", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                miktar = miktarYeri.getText();
            }
            neden = NedenYeri.getText();
            if (faizYeri.getSelectedIndex() == 1) {
                faiz = "3";
            } else if (faizYeri.getSelectedIndex() == 2) {
                faiz = "4";
            } else if (faizYeri.getSelectedIndex() == 3) {
                faiz = "5";
            } else {
                JOptionPane.showMessageDialog(this, "Lütfen bir faiz oranı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Kredi yeniK = new Kredi(yeniM.TC, neden, miktar, faiz);
        } else {
            return;
        }
        kredileriEkle();
    }//GEN-LAST:event_KrediBasvurButtonActionPerformed

    private void KrediOdeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrediOdeButtonActionPerformed
        // TODO add your handling code here:
        String Odencekmiktar;
        int row;
        double borc, miktar;
        DefaultTableModel model = (DefaultTableModel) KredilerTablo.getModel();
        if (KredilerTablo.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Lütfen düzenleme istediğiniz kartı seçiniz", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            row = KredilerTablo.getSelectedRow();
        }
        if (model.getValueAt(row, 5).toString().equals("-")) {
            JOptionPane.showMessageDialog(this, "Bu kredi daha onaylanmamış", "Hata", JOptionPane.WARNING_MESSAGE);
            return;
        }
        do {
            Odencekmiktar = JOptionPane.showInputDialog(null, "Ödemek istediğiniz miktarı giriniz");
        } while (Odencekmiktar.isEmpty());
        {

        }
        borc = Double.valueOf(model.getValueAt(row, 4).toString());
        miktar = Double.valueOf(Odencekmiktar);
        if (borc == miktar) {
            try {
                File inputFile = new File("KrediBilgi.txt");
                File tempFile = new File("myTempFile.txt");

                BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

                FileReader okuyucu2 = new FileReader("KrediBilgi.txt");
                BufferedReader br = new BufferedReader(okuyucu2);
                String satır;
                String lineToRemove = "";
                while ((satır = br.readLine()) != null) {
                    String bilgiler[] = new String[7];
                    bilgiler = satır.split("/");
                    if (model.getValueAt(row, 0).toString().equals(bilgiler[2]) && yeniM.TC.equals(bilgiler[0])) {
                        lineToRemove = satır;
                    }
                }
                String currentLine;

                while ((currentLine = reader.readLine()) != null) {
                    // trim newline when comparing with lineToRemove
                    String trimmedLine = currentLine.trim();
                    if (trimmedLine.equals(lineToRemove)) {
                        continue;
                    }
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
                writer.close();
                reader.close();
                br.close();
                okuyucu2.close();
                inputFile.delete();
                tempFile.renameTo(inputFile);
            } catch (IOException ex) {
               
            }
            JOptionPane.showMessageDialog(this, "Kredi borcunuz ödendi");
        } else if (borc > miktar) {
            try {
                FileReader okuyucu = new FileReader("KrediBilgi.txt");
                BufferedReader br = new BufferedReader(okuyucu);
                String satır;
                while ((satır = br.readLine()) != null) {
                    String bilgiler[] = new String[7];
                    bilgiler = satır.split("/");
                    if (model.getValueAt(row, 0).toString().equals(bilgiler[2])) {
                        double yeniborc = borc - miktar;
                        bilgiler[5] = String.valueOf(yeniborc);
                        String satır2 = bilgiler[0] + "/" + bilgiler[1] + "/" + bilgiler[2] + "/" + bilgiler[3] + "/" + bilgiler[4] + "/" + bilgiler[5] + "/" + bilgiler[6];

                        List<String> fileContent = new ArrayList<>(Files.readAllLines(Paths.get("KrediBilgi.txt"), StandardCharsets.UTF_8));

                        for (int i = 0; i < fileContent.size(); i++) {
                            if (fileContent.get(i).equals(satır)) {
                                fileContent.set(i, satır2);
                                break;
                            }
                        }
                        JOptionPane.showMessageDialog(this, miktar + " tl ödendi");
                        Files.write(Paths.get("KrediBilgi.txt"), fileContent, StandardCharsets.UTF_8);
                    }
                }
                okuyucu.close();
                br.close();
            } catch (Exception e) {
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "Girdiğiniz para borcunuzdan fazla", "Hata", JOptionPane.WARNING_MESSAGE);
        }
        kredileriEkle();
        yeniM.krediOde(miktar);
        paraYeri.setText("Paranız \n" + yeniM.bakiyeOgren() + " TL");
    }//GEN-LAST:event_KrediOdeButtonActionPerformed

    private void CikisYapPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CikisYapPanelMousePressed
        // TODO add your handling code here:
        setColor(CikisYapPanel);
        CikisYapPanel.setOpaque(true);
        resetColor(
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, IslemlerPanel,KredilerPanel},
                new JPanel[]{KartımPanel, HesabımPanel, ParaTransferPanel, IslemlerPanel,KredilerPanel}
        );
        this.dispose();
        Giris yeniG = new Giris();
        yeniG.setVisible(true);
    }//GEN-LAST:event_CikisYapPanelMousePressed

    private void CikisYapPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CikisYapPanelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_CikisYapPanelMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusteriEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusteriEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusteriEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusteriEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    private void setColor(JPanel pane) {
        pane.setBackground(new Color(41, 57, 80));
    }

    private void resetColor(JPanel[] pane, JPanel[] ind) {
        for (int i = 0; i < pane.length; i++) {
            pane[i].setBackground(new Color(23, 35, 51));
        }
        for (int i = 0; i < ind.length; i++) {
            ind[i].setOpaque(false);
        }
    }

    private void kartlarıEkle() {
        try {
            DefaultTableModel model = (DefaultTableModel) KartlarTablo.getModel();
            model.setRowCount(0);
            FileReader okuyucu = new FileReader("KartBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[7];
                bilgiler = satır.split("/");
                if(bilgiler[0].equals(yeniM.TC)){
                model.addRow(new Object[]{bilgiler[1], bilgiler[2], bilgiler[3], bilgiler[4], bilgiler[5], bilgiler[6]});
                }
            }
            okuyucu.close();
            br.close();
        } catch (Exception e) {
            
        }
    }

    private void kredileriEkle() {
        try {
            DefaultTableModel model = (DefaultTableModel) KredilerTablo.getModel();
            model.setRowCount(0);
            FileReader okuyucu = new FileReader("KrediBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[7];
                bilgiler = satır.split("/");
                if(bilgiler[0].equals(yeniM.TC)){
                model.addRow(new Object[]{bilgiler[2], bilgiler[1], bilgiler[3], bilgiler[4], bilgiler[5], bilgiler[6]});
                }
            }
            okuyucu.close();
            br.close();
        } catch (Exception e) {
           
        }
    }

    private void BorcOdeComboGuncelle() {
        KartSecmeYeri.removeAllItems();
        KartSecmeYeri.addItem("İsim / No / Borç");
        ArrayList<String> kartIsım = new ArrayList<>();
        ArrayList<String> kartNo = new ArrayList<>();
        ArrayList<String> kartBorc = new ArrayList<>();
        try {
            FileReader okuyucu = new FileReader("KartBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[7];
                bilgiler = satır.split("/");
                if (bilgiler[6].equals("+")) {
                    kartIsım.add(bilgiler[1]);
                    kartNo.add(bilgiler[2]);
                    kartBorc.add(bilgiler[5]);
                }
            }
            okuyucu.close();
            br.close();
            for (int i = 0; i < kartIsım.size(); i++) {
                KartSecmeYeri.addItem(kartIsım.get(i) + " / " + kartNo.get(i) + " / " + kartBorc.get(i));
            }
        } catch (IOException ex) {
            
        }
    }

    private void FatureOdeComboGuncelle() {
        FaturaOdeSec.removeAllItems();
        FaturaOdeSec.addItem("Seçiniz");
        FaturaOdeSec.addItem("Banka Hesabı");
        ArrayList<String> kartIsım = new ArrayList<>();
        ArrayList<String> kartNo = new ArrayList<>();
        ArrayList<String> kartBakiye = new ArrayList<>();
        try {
            FileReader okuyucu = new FileReader("KartBilgi.txt");
            BufferedReader br = new BufferedReader(okuyucu);
            String satır;
            while ((satır = br.readLine()) != null) {
                String bilgiler[] = new String[7];
                bilgiler = satır.split("/");
                if (bilgiler[6].equals("+")) {
                    kartIsım.add(bilgiler[1]);
                    kartNo.add(bilgiler[2]);
                    kartBakiye.add(bilgiler[4]);
                }
            }
            okuyucu.close();
            br.close();
            for (int i = 0; i < kartIsım.size(); i++) {
                FaturaOdeSec.addItem("Kredi Kartı : " + kartIsım.get(i) + " / " + kartNo.get(i) + " / " + kartBakiye.get(i));
            }
        } catch (IOException ex) {
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CikisYapPanel;
    private javax.swing.JComboBox<String> FaturaKurumSec;
    private javax.swing.JButton FaturaOdeButton;
    private javax.swing.JTextField FaturaOdeParaYeri;
    private javax.swing.JComboBox<String> FaturaOdeSec;
    private javax.swing.JButton GonderButon;
    private javax.swing.JTextField GonderilcekParaYeri;
    private javax.swing.JPanel HesabimEkran;
    private javax.swing.JPanel HesabımPanel;
    private javax.swing.JButton HesapAyarlarıButton;
    private java.awt.Label HosgeldinizLabel;
    private javax.swing.JTextField IBANYazmaYeri;
    private java.awt.Label IBANYeri;
    private javax.swing.JPanel IslemlerEkran;
    private javax.swing.JPanel IslemlerPanel;
    private javax.swing.JButton KartBorcuOdeButton;
    private javax.swing.JTextField KartBorcuOdeYeri;
    private javax.swing.JButton KartDuzenleButon;
    private javax.swing.JButton KartEkleButton;
    private javax.swing.JButton KartLimitButon;
    private javax.swing.JComboBox<String> KartSecmeYeri;
    private javax.swing.JButton KartSilButon;
    private javax.swing.JTable KartlarTablo;
    private javax.swing.JPanel KartlarımEkran;
    private javax.swing.JPanel KartımPanel;
    private javax.swing.JButton KrediBasvurButton;
    private javax.swing.JButton KrediOdeButton;
    private javax.swing.JPanel KredilerEkran;
    private javax.swing.JPanel KredilerPanel;
    private javax.swing.JTable KredilerTablo;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JButton ParaCekButton;
    private javax.swing.JTextField ParaCekYeri;
    private javax.swing.JPanel ParaTransferEkran;
    private javax.swing.JPanel ParaTransferPanel;
    private javax.swing.JTextField ParaYatirYeri;
    private javax.swing.JButton ParaYatırButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label paraYeri;
    // End of variables declaration//GEN-END:variables
}
